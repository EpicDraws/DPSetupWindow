{"name":"DPSetupWindow","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Classes for creating an Installer.app like setup process from a set of view controllers.","google":"","body":"## DPSetupWindow\r\n\r\nDPSetupWindow makes it easy to add setup style modal sheets or windows to your\r\nObjective-C and Cocoa applications on Mac OS. Simply create a set of view\r\ncontrollers and DPSetupWindow will take care of moving between them, as each\r\nperforms its validation and allows the process to continue.\r\n\r\n![Example Setup Window](http://f.cl.ly/items/2h3j241C1p0K1O423i0o/DPSetupWindow.png)\r\n\r\nInspriation for this was taken from Mac OS installer applications and Mail.app's\r\naccount configuration process.\r\n\r\n### Usage\r\n\r\n`DPSetupWindow` is designed to be very easy to use. The example application\r\ndistributed with the source code should provide enough documentation on how to\r\nuse it, but here is an overview.\r\n\r\nFirstly create the setup window with an array of view controller for it to use.\r\nA callback must also be provided, which will be called when the window closes,\r\npassing back a boolean representing whether the user reached the end of the\r\nprocess or not.\r\n\r\n```objective-c\r\nDPSetupWindow *setupFlow = [[DPSetupWindow alloc] initWithViewControllers: @[\r\n\tfirstViewController,\r\n\tsecondViewController,\r\n\tthirdViewController\r\n] completionHandler:(void (^)(BOOL completed) {\r\n\t[setupFlow orderOut:self];\r\n}];\r\n```\r\n\r\nThere are two ways to use the setup window, either as a modal sheet where the\r\ndeveloper can control all aspects as would be normal, or as a standard window.\r\n\r\n```objective-c\r\n// Modal sheet\r\n[[NSApplication sharedApplication] beginSheet:setupFlow \r\n                               modalForWindow:[self window]\r\n                                modalDelegate:nil\r\n                               didEndSelector:NULL\r\n                                  contextInfo:NULL];\r\n\r\n// Regular window\r\n[[self setupFlow] makeKeyAndOrderFront:self];\r\n```\r\n\r\nThe window can be customised with a background image, the default being your\r\napplication's icon.\r\n\r\n```objective-c\r\n[setupFlow setBackgroundImage:[NSImage imageNamed:@\"NSUserAccounts\"]];\r\n```\r\n\r\nEach view controller in the setup process must implement the optional\r\n`DPSetupWindowStageViewController` protocol.\r\n\r\nThis protocol gives the view controller the ability to stop the user from going\r\nbackwards or forwards by implementing the `canContinue` and `canGoBack` boolean\r\nproperties. Button titles can also be overridden, for example you may want the\r\nlast stage to say \"Finish\" instead of \"Continue\", in which case the last view\r\ncontroller should contain the following.\r\n\r\n```objective-c\r\n- (NSString *)continueButtonTitle {\r\n\treturn @\"Finish\";\r\n}\r\n```\r\n\r\nIn order to make the setup process consistent with other similar windows, a\r\nfixed size of window is used, and therefore the views owned by the view \r\ncontrollers have a fixed size of 400Ã—330 points.\r\n\r\nView controllers can implement `-setSetupWindow:` either as a method or a\r\nsynthesized property in order to access the setup window. This allows them to\r\nchange the setup process or control it in code as it is being used. For example,\r\nthe first view controller will add a different controller to be used in the next\r\nstage when `willProgressToNextStage` is called depending on whether the user\r\nselects 'basic' or 'advanced' setup.\r\n\r\nBeing able to programmatically advance or revert the setup process may be useful\r\nin the case of contacting web services for authentication. An intermediate \r\n'loading' controller may be used where the continue and back buttons are\r\ndisabled, this controller can move to the appropriate stage based on a response\r\nfrom a web service.\r\n\r\n### Licence (MIT)\r\n\r\nCopyright (c) 2012 Dan Palmer\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE."}